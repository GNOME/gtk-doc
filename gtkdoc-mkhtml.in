#!@PYTHON@

# Support both Python 2 and 3
from __future__ import print_function

import os, sys, argparse, subprocess, shutil
from glob import glob

version = '@VERSION@'
xsltproc = '@XSLTPROC@'

parser = argparse.ArgumentParser(description='gtkdoc-mkhtml version %s - generate documentation in html format' % version)

parser.add_argument('--verbose', default=False, action='store_true',
                    help='Print extra output while processing')
parser.add_argument('--path', default=[], action='append',
                    help='Extra source directories')
parser.add_argument('--version', default=False, action='store_true',
                    help='Print the version of this program')
parser.add_argument('args', nargs='*',
                    help='MODULE DRIVER_FILE')
parser.add_argument('--uninstalled', action='store_true', default=False,
                    help='???')

options = parser.parse_args()
if options.version:
    print(version)
    sys.exit(0)

if len(options.args) < 2:
    sys.exit('Too few arguments')

module=options.args[0]
document=options.args[1]
if options.verbose:
    quiet = '0'
else:
    quiet = '1'
remaining_args = options.args[2:]

if options.uninstalled:
    # this does not work from buiddir!=srcdir
    gtkdocdir = os.path.split(sys.argv[0])[0]
    # traditional Bourne shells may not support -e here, use -f
    if not os.path.exists(gtkdocdir + '/gtk-doc.xsl'):
        # try to src dir (set from makefiles) too
        if os.path.exists(os.path.environ.get("ABS_TOP_SRCDIR", '') + '/gtk-doc.xsl'):
            gtkdocdir=os.path.environ['ABS_TOP_SRCDIR']
    styledir=gtkdocdir + '/style'
    #echo "uninstalled, gtkdocdir=$gtkdocdir, cwd=$PWD"
else:
    # the first two are needed to resolve datadir
    prefix='@prefix@'
    datarootdir='@datarootdir@'
    gtkdocdir='@datadir@/gtk-doc/data'
    styledir=gtkdocdir

# We need to use a wrapper because there's no other way to conditionally pass
# a `--path $searchpath` argument with proper quoting for the path
def run_xsltproc(args):
    # we could do "$path_option $PWD "
    # to avoid needing rewriting entities that are copied from the header
    # into docs under xml
    if os.environ.get("GTKDOC_PROFILE", '') == '':
        if len(options.path):
            subprocess.check_call([xsltproc] + args)
        else:
            subprocess.check_call([xsltproc, '--path'] + options.path + args)
    else:
        if len(options.path) == 0:
            subprocess.check_call([xsltproc, '--profile'] + args, stderr=open('profile.txt', 'w'))
        else:
            subprocess.check_call([xsltproc ,'--profile', '--path'] + options.path + args, stderr=open('profile.txt', 'w'))

run_xsltproc(['--nonet',
              '--xinclude',
              '--stringparam',
              'gtkdoc.bookname',
              module,
              '--stringparam',
              'gtkdoc.version',
              version,
              '--stringparam',
              'chunk.quietly',
              quiet,
              '--stringparam',
              'chunker.output.quiet',
              quiet] + remaining_args + \
             [gtkdocdir + '/gtk-doc.xsl',
              document])

# profiling
if os.environ.get("GTKDOC_PROFILE", '') != '':
   subprocess.check_call('cat profile.txt | gprof2dot.py -e 0.01 -n 0.01 | dot -Tpng -o profile.png', shell=True)

# copy navigation images and stylesheets to html directory ...
for f in glob(styledir + '/*.png') + glob(styledir + '/*.css'):
     shutil.copy(f, '.')

open('../html.stamp', 'w').write('timestamp')

