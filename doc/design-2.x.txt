= gtk-doc-2.X =
This documents purpose is to collect what needs to be changed for a potential
gtk-doc-2.X.

== name ==
Its not about Gtk. Its about C APIs with GObject support. But it is probably not
worth it.
g-doc, gapi-doc, gnome-api-doc, ...

== remove and deprecate =
- tree_index and object_index are still named *.sgml
- in the makefiles
  sgml-build.stamp -> db-build.stamp
  sgml.stamp -> db.stamp

== design fixes ==
=== proper xml-id namesspaces ===
We need proper xml-id namesspaces for document structure and symbols to avoid
clashes e.g. between GtkWidget as a section and as a struct. Normal symbols
should only be mangled to be a valid xml-id. Document structure ids should
contain a prefix.

These are the rules regarding id-attributes:

http://www.w3.org/TR/html4/types.html#type-id:
"ID and NAME tokens must begin with a letter ([A-Za-z]) and may be followed by
 any number of letters, digits ([0-9]), hyphens ("-"), underscores ("_"), colons
 (":"), and periods (".")."

http://www.w3.org/TR/xml-id/#id-avn
"Attributes of type ID are subject to additional normalization rules: removing
 leading and trailing space characters and replacing sequences of spaces with a
 single space."

http://www.w3.org/TR/xml11/#NT-Name
http://www.w3.org/TR/REC-xml/#NT-Name

So we could easily use "DOC:" as a prefix for document structure ids.
In 1.x we add :CAPS as a suffix to avoid clashes between lower and uppercase
constructs. XML-IDs are not case insensitive, so we don't need that.

If the ID contain a ':' xml processors believe it is using a namespace.

=== less files to maintain ===
- one needs to maintain $module-docs.xml
- in most cases $module-sections.txt need manual maintenance
  - we could have a "Section:" tag for non-section comments to add them to a non
    default section
  - we could have a "Private_Symbols:" tag in section to list symbols that
    should be in private subsection
- the $module.types file need manual maintenance if one need special includes
  - can we make the scanner smarter?

=== srcdir != builddir builds ===
- all tools get a search path
  - it contains builddir:srcdir if those are different or just one of them if
    they are the same
  - all files we read are checked through the path
  - all files are written based on the first entry

=== build dependencies ===

=== error/warning reporting ===
- don't fail the build on doc-issues, instead fail the tests
- all diagnostic output from the tools run during build in gcc style
- instead of having -{undocumented,undeclared,unused}.txt have just one file
  'doc-module.log'
  - contains all the build diagnostics as well
  - summary as 'INFO' level
- gtkdoc-check will scan that file for 'ERROR'/'WARNING' lines
  - depending on the CHECK_OPTIONS and the found lines if will fail certain
    tests

- TODO
  - recheck all output and check whether we need Warnings/Errors or just
    Warnings and flags to silence them
  - Do we need a way to suppress false positives?

=== docbook -> markdown ===
The main performance culprit is the use of docbook (tools). Also writing docbook
in source comments is cumbersome. We already support lots of markdown, so we'd
like to have a pure markdown based workflow.

For that we'd like to provide a migration path:
- convert existing docbook files to markdown (e.g. pandoc)
- convert/identify comments using docbook to markdown

Next we need a replacement for gtkdoc-mkdb: gtkdoc-mkmd to create extract
markdown from  sources and generate support files (index files). We also need to
patch gtkdoc-{mkdb/pdf} to run respective tools (e.g. pandoc).

We can enable such a toolchain via the configure flavors option.

TODO:
- markdown does not define a way to aggregate fragments into a large book
  - we can only concat all the files in a stable order

As a first step we need to make sure we only render the html files with docbook.
Right now we also produce the devhelp files using xslt (see devhelp2.xsl). We
should be able to produce the devhelp files from gtkdoc-mkdb directly. We can
generate this file outside of the html dir (and adjust the make install target).
The tricky part is that we might need to scan the static content files to be
able to generate the same toc.
A nice extra benefit would be that this should already make things faster.


