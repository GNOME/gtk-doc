<?xml version="1.0" standalone="no"?>
<?xml-stylesheet type="text/xml" href="params.xsl"?>
<!-- vim: set ai tw=80 ts=3 sw=3: -->
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "
              http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [

<!ENTITY FDL SYSTEM "fdl-appendix.xml">
<!ENTITY FDLlink "<link linkend='fdl'>included</link>">
]><!-- =============Document Header ============================= -->
<book id="index">
  <bookinfo>
    <title>GTK-Doc Manual</title>
    <edition>1.24.1</edition>
    <abstract role="description"><para>User manual for developers with instructions of GTK-Doc usage.</para></abstract>
    <authorgroup>
      <author>
        <firstname>Chris</firstname>
        <surname>Lyttle</surname>
        <affiliation>
          <address>
            <email>chris@wilddev.net</email>
          </address>
        </affiliation>
      </author>
      <author>
        <firstname>Dan</firstname>
        <surname>Mueth</surname>
        <affiliation>
          <address>
            <email>d-mueth@uchicago.edu</email>
          </address>
        </affiliation>
      </author>
      <author>
        <firstname>Stefan</firstname>
        <surname>Sauer (Kost)</surname>
        <affiliation>
          <address>
            <email>ensonic@users.sf.net</email>
          </address>
        </affiliation>
      </author>
    </authorgroup>
    <publisher role="maintainer">
      <publishername>GTK-Doc project</publishername>
      <address><email>gtk-doc-list@gnome.org</email></address>
    </publisher>
    <copyright>
      <year>2000, 2005</year>
      <holder>Dan Mueth and Chris Lyttle</holder>
    </copyright>
    <copyright>
      <year>2007-2015</year>
      <holder>Stefan Sauer (Kost)</holder>
    </copyright>

    <!-- translators: uncomment this:
    <copyright>
      <year>2000</year>
      <holder>ME-THE-TRANSLATOR (Latin translation)</holder>
    </copyright>
    -->

    <legalnotice>
      <para>
        Permission is granted to copy, distribute and/or modify this
        document under the terms of the <citetitle>GNU Free Documentation
        License</citetitle>, Version 1.1 or any later version published
        by the Free Software Foundation with no Invariant Sections, no
        Front-Cover Texts, and no Back-Cover Texts. A copy of the license
        is &FDLlink;.
      </para>
      <para>
        Many of the names used by companies to distinguish their products and
        services are claimed as trademarks. Where those names appear in any
        GNOME documentation, and those trademarks are made aware to the members
        of the GNOME Documentation Project, the names have been printed in caps
        or initial caps.
      </para>
    </legalnotice>

    <revhistory>
      <revision>
         <revnumber>1.28</revnumber>
         <date>24 Mar 2018</date>
         <authorinitials>ss</authorinitials>
         <revremark>bug fixes</revremark>
      </revision>
      <revision>
         <revnumber>1.27</revnumber>
         <date>07 Dec 2017</date>
         <authorinitials>ss</authorinitials>
         <revremark>fine tuning of the python port</revremark>
      </revision>
      <revision>
         <revnumber>1.26</revnumber>
         <date>11 Aug 2017</date>
         <authorinitials>ss</authorinitials>
         <revremark>port all tools from perl/bash to python</revremark>
      </revision>
      <revision>
        <revnumber>1.25</revnumber>
        <date>21 March 2016</date>
        <authorinitials>ss</authorinitials>
        <revremark>bug fixes, test cleanups</revremark>
      </revision>
      <revision>
        <revnumber>1.24</revnumber>
        <date>29 May 2015</date>
        <authorinitials>ss</authorinitials>
        <revremark>bug fix</revremark>
      </revision>
      <revision>
        <revnumber>1.23</revnumber>
        <date>17 May 2015</date>
        <authorinitials>ss</authorinitials>
        <revremark>bug fix</revremark>
      </revision>
      <revision>
        <revnumber>1.22</revnumber>
        <date>07 May 2015</date>
        <authorinitials>ss</authorinitials>
        <revremark>bug fixes, dropping deprecated features</revremark>
      </revision>
      <revision>
        <revnumber>1.21</revnumber>
        <date>17 Jul 2014</date>
        <authorinitials>ss</authorinitials>
        <revremark>bug fixes, dropping deprecated features</revremark>
      </revision>
      <revision>
        <revnumber>1.20</revnumber>
        <date>16 Feb 2014</date>
        <authorinitials>ss</authorinitials>
        <revremark>bug fixes, markdown support, style improvements</revremark>
      </revision>
      <revision>
        <revnumber>1.19</revnumber>
        <date>05 Jun 2013</date>
        <authorinitials>ss</authorinitials>
        <revremark>bug fixes</revremark>
      </revision>
      <revision>
        <revnumber>1.18</revnumber>
        <date>14 Sep 2011</date>
        <authorinitials>ss</authorinitials>
        <revremark>bug fixes, speedups, markdown support</revremark>
      </revision>
      <revision>
        <revnumber>1.17</revnumber>
        <date>26 Feb 2011</date>
        <authorinitials>sk</authorinitials>
        <revremark>urgent bug fix update</revremark>
      </revision>
      <revision>
        <revnumber>1.16</revnumber>
        <date>14 Jan 2011</date>
        <authorinitials>sk</authorinitials>
        <revremark>bugfixes, layout improvements</revremark>
      </revision>
      <revision>
        <revnumber>1.15</revnumber>
        <date>21 May 2010</date>
        <authorinitials>sk</authorinitials>
        <revremark>bug and regression fixes</revremark>
      </revision>
      <revision>
        <revnumber>1.14</revnumber>
        <date>28 March 2010</date>
        <authorinitials>sk</authorinitials>
        <revremark>bugfixes and performance improvements</revremark>
      </revision>
      <revision>
        <revnumber>1.13</revnumber>
        <date>18 December 2009</date>
        <authorinitials>sk</authorinitials>
        <revremark>broken tarball update</revremark>
      </revision>
      <revision>
        <revnumber>1.12</revnumber>
        <date>18 December 2009</date>
        <authorinitials>sk</authorinitials>
        <revremark>new tool features and bugfixes</revremark>
      </revision>
      <revision>
        <revnumber>1.11</revnumber>
        <date>16 November 2008</date>
        <authorinitials>mal</authorinitials>
        <revremark>GNOME doc-utils migration</revremark>
      </revision>
    </revhistory>

  </bookinfo>

  <!-- ======== Chapter 1: Introduction ======================== -->

  <chapter id="introduction">
    <title>Introduction</title>

    <para>
      This chapter introduces GTK-Doc and gives an overview of what it is and
      how it is used.
    </para>

    <sect1 id="whatisgtkdoc">
      <title>What is GTK-Doc?</title>

      <para>
        GTK-Doc is used to document C code. It is typically used to document the public
        API of libraries, such as the GTK+ and GNOME libraries. But it can also be
        used to document application code.
      </para>
    </sect1>

    <sect1 id="howdoesgtkdocwork">
      <title>How Does GTK-Doc Work?</title>

      <para>
        GTK-Doc works by using documentation of functions placed inside the source files in
        specially-formatted comment blocks, or documentation added to the template files
        which GTK-Doc uses (though note that GTK-Doc will only document functions that
        are declared in header files; it won't produce output for static functions).
      </para>

      <para>
        GTK-Doc consists of a number of python scripts, each performing a different step
        in the process.
      </para>

      <para>
        There are 5 main steps in the process:
      </para>

      <orderedlist>

        <listitem>
          <para>
            <guilabel>Writing the documentation.</guilabel>

            The author fills in the source files with the documentation for each
            function, macro, union etc. (In the past information was entered in
            generated template files, which is not recommended anymore).
          </para>
        </listitem>

        <listitem>
          <para>
            <guilabel>Gathering information about the code.</guilabel>

            <application>gtkdoc-scan</application> scans the header files of the
            code looking for declarations of functions, macros, enums, structs, and unions.
            It creates the file <filename>&lt;module&gt;-decl-list.txt</filename> containing a list of the
            declarations, placing them into sections according to which header file they
            are in. On the first run this file is copied to <filename>&lt;module&gt;-sections.txt</filename>.
            The author can rearrange the sections, and the order of the
            declarations within them, to produce the final desired order.
            The second file it generates is <filename>&lt;module&gt;-decl.txt</filename>.
            This file contains the full declarations found by the scanner. If for
            some reason one would like some symbols to show up in the docs, where
            the full declaration cannot be found by the scanner or the declaration
            should appear differently, one can place entities similar to the ones in
            <filename>&lt;module&gt;-decl.txt</filename> into <filename>&lt;module&gt;-overrides.txt</filename>.
         </para>
         <para>
            <application>gtkdoc-scangobj</application> can also be used to dynamically query a library about
            any GObject subclasses it exports. It saves information about each
            object's position in the class hierarchy and about any GObject properties
            and signals it provides.
          </para>
         <para>
            <application>gtkdoc-scanobj</application> should not be used anymore.
            It was needed in the past when GObject was still GtkObject inside gtk+.
         </para>
        </listitem>

        <listitem>
          <para>
            <guilabel>Generating the XML and HTML/PDF.</guilabel>

            <application>gtkdoc-mkdb</application> turns the template files into
            XML files in the <filename class='directory'>xml/</filename> subdirectory.
            If the source code contains documentation on functions, using the
            special comment blocks, it gets merged in here. If there are no tmpl files used
            it only reads docs from sources and introspection data.
          </para>
          <para>
            <application>gtkdoc-mkhtml</application> turns the XML files into HTML
            files in the <filename class='directory'>html/</filename> subdirectory.
            Likewise <application>gtkdoc-mkpdf</application> turns the XML files into a PDF
            document called <filename>&lt;package&gt;.pdf</filename>.
          </para>
          <para>
            Files in <filename class='directory'>xml/</filename> and
            <filename class='directory'>html/</filename> directories are always
            overwritten. One should never edit them directly.
          </para>
        </listitem>

        <listitem>
          <para>
            <guilabel>Fixing up cross-references between documents.</guilabel>

            After installing the HTML files, <application>gtkdoc-fixxref</application> can be run to fix up any
            cross-references between separate documents. For example, the GTK+
            documentation contains many cross-references to types documented in the GLib manual.

            When creating the source tarball for distribution, <application>gtkdoc-rebase</application>
            turns all external links into web-links. When installing distributed (pregenerated) docs
            the same application will try to turn links back to local links
            (where those docs are installed).
          </para>
        </listitem>
      </orderedlist>

    </sect1>

    <sect1 id="gettinggtkdoc">
      <title>Getting GTK-Doc</title>

      <sect2 id="requirements">
        <title>Requirements</title>
        <para>
          <guilabel>python 2/3</guilabel> - the main scripts are written in python.
        </para>
        <para>
          <guilabel>xsltproc</guilabel> - the xslt processor from libxslt
          <ulink url="http://xmlsoft.org/XSLT/" type="http">xmlsoft.org/XSLT/</ulink>
        </para>
        <para>
          <guilabel>docbook-xsl</guilabel> - the docbook xsl stylesheets
          <ulink url="http://sourceforge.net/projects/docbook/files/docbook-xsl/" type="http">sourceforge.net/projects/docbook/files/docbook-xsl</ulink>
        </para>
        <para>
          One of <guilabel>source-highlight</guilabel>, <guilabel>highlight</guilabel> or
          <guilabel>vim</guilabel> - optional - used for syntax highlighting of examples
        </para>
      </sect2>
    </sect1>

    <sect1 id="aboutgtkdoc">
      <title>About GTK-Doc</title>

      <para>
        (FIXME)
      </para>

      <para>
        (History, authors, web pages, mailing list, license, future plans,
        comparison with other similar systems.)
      </para>

    </sect1>

    <sect1 id="aboutthismanual">
      <title>About this Manual</title>

      <para>
        (FIXME)
      </para>

      <para>
        (who it is meant for, where you can get it, license)
      </para>

    </sect1>

  </chapter>

  <chapter id="settingup">
    <title>Setting up your project</title>

    <para>
      The next sections describe what steps to perform to integrate GTK-Doc into
      your project. Theses sections assume we work on a project called 'meep'.
      This project contains a library called 'libmeep' and
      an end-user app called 'meeper'. We also assume you will be using autoconf
      and automake. In addition section <link linkend="plain_makefiles">plain
      makefiles or other build systems</link> will describe the basics needed to
      work in a different build setup.
    </para>

    <sect1 id="settingup_docfiles">
      <title>Setting up a skeleton documentation</title>

      <para>
        Under your top-level project directory create folders called docs/reference
        (this way you can also have docs/help for end-user documentation).
        It is recommended to create another subdirectory with the name of the doc-package.
        For packages with just one library this step is not necessary.
      </para>

      <para>
        This can then look as shown below:
        <example><title>Example directory structure</title>
          <programlisting><![CDATA[
meep/
  docs/
    reference/
      libmeep/
      meeper/
  src/
    libmeep/
    meeper/
]]></programlisting>
        </example>
      </para>
    </sect1>

    <sect1 id="settingup_autoconf">
      <title>Integration with autoconf</title>

      <para>
        Very easy! Just add one line to your <filename>configure.ac</filename> script.
      </para>

      <para>
        <example><title>Integration with autoconf</title>
          <programlisting><![CDATA[
# check for gtk-doc
GTK_DOC_CHECK([1.14],[--flavour no-tmpl])
]]></programlisting>
        </example>
      </para>

      <para>
        This will require all developers to have gtk-doc installed. If it is
        okay for your project to have optional api-doc build setup, you can
        solve this as below. Keep it as is, as gtkdocize is looking for
        <function>GTK_DOC_CHECK</function>  at the start of a line.
        <example><title>Keep gtk-doc optional</title>
          <programlisting><![CDATA[
# check for gtk-doc
m4_ifdef([GTK_DOC_CHECK], [
GTK_DOC_CHECK([1.14],[--flavour no-tmpl])
],[
AM_CONDITIONAL([ENABLE_GTK_DOC], false)
])
]]></programlisting>
        </example>
      </para>

      <para>
        The first argument is used to check for the gtkdocversion at configure time.
        The 2nd, optional argument is used by <application>gtkdocize</application>.
        The <symbol>GTK_DOC_CHECK</symbol> macro also adds several configure switches:
      </para>
      <orderedlist>
        <listitem><para>--with-html-dir=PATH : path to installed docs</para></listitem>
        <listitem><para>--enable-gtk-doc : use gtk-doc to build documentation [default=no]</para></listitem>
        <listitem><para>--enable-gtk-doc-html : build documentation in html format [default=yes]</para></listitem>
        <listitem><para>--enable-gtk-doc-pdf : build documentation in pdf format [default=no]</para></listitem>
      </orderedlist>

      <important>
      	<para>
          GTK-Doc is disabled by default! Remember to pass the option
          <option>'--enable-gtk-doc'</option> to the next
          <filename>configure</filename> run. Otherwise pregenerated documentation is installed
          (which makes sense for users but not for developers).
        </para>
      </important>

      <para>
        Furthermore it is recommended that you have the following line inside
        your <filename>configure.ac</filename> script.
        This allows <application>gtkdocize</application> to automatically copy the
        macro definition for <function>GTK_DOC_CHECK</function> to your project.
      </para>

      <para>
        <example><title>Preparation for gtkdocize</title>
          <programlisting><![CDATA[
AC_CONFIG_MACRO_DIR(m4)
]]></programlisting>
        </example>
      </para>
      <para>
        After all changes to <filename>configure.ac</filename> are made, update
        the <filename>configure</filename> file. This can be done by re-running
        <code>autoreconf -i</code> or <code>autogen.sh</code>.
      </para>
    </sect1>

    <sect1 id="settingup_automake">
      <title>Integration with automake</title>

      <para>
        First copy the <filename>Makefile.am</filename> from the
        <filename class='directory'>examples</filename> sub directory of the
        <ulink url="https://git.gnome.org/browse/gtk-doc/tree/examples/Makefile.am">gtkdoc-sources</ulink>
        to your project's API documentation directory (
        <filename class='directory'>./docs/reference/&lt;package&gt;</filename>).
        A local copy should be available under e.g.
        <filename>/usr/share/doc/gtk-doc-tools/examples/Makefile.am</filename>.
        If you have multiple doc-packages repeat this for each one.
      </para>

      <para>
        The next step is to edit the settings inside the <filename>Makefile.am</filename>.
        All the settings have a comment above that describes their purpose.
        Most settings are extra flags passed to the respective tools. Every tool
        has a variable of the form <option>&lt;TOOLNAME&gt;_OPTIONS</option>.
        All the tools support <option>--help</option> to list the supported
        parameters.
      </para>

      <!-- FIXME: explain options ? -->

    </sect1>

    <sect1 id="settingup_autogen">
      <title>Integration with autogen</title>

      <para>
        Most projects will have an <filename>autogen.sh</filename> script to
        setup the build infrastructure after a checkout from version control
        system (such as cvs/svn/git). GTK-Doc comes with a tool called
        <application>gtkdocize</application> which can be used in such a script.
        It should be run before autoheader, automake or autoconf.
      </para>

      <para>
        <example><title>Running gtkdocize from autogen.sh</title>
          <programlisting><![CDATA[
gtkdocize || exit 1
]]></programlisting>
        </example>
      </para>

      <para>
        When running <application>gtkdocize</application> it copies
        <filename>gtk-doc.make</filename> to your project root (or any directory
        specified by the <option>--docdir</option> option).
        It also checks you configure script for the <function>GTK_DOC_CHECK</function>
        invocation. This macro can be used to pass extra parameters to
        <application>gtkdocize</application>.
      </para>

      <para>
        Historically GTK-Doc was generating template files where developers entered the docs.
        This turned out to be not so good (e.g. the need for having generated
        files under version control).
        Since GTK-Doc 1.9 the tools can get all the information from source comments
        and thus the templates can be avoided. We encourage people to keep
        documentation in the code. <application>gtkdocize</application> supports now
        a <option>--flavour no-tmpl</option> option that chooses a makefile that skips
        tmpl usage totally. Besides adding the option directly to the command
        invocation, they can be added also to an environment variable called <symbol>GTKDOCIZE_FLAGS</symbol>
        or set as a 2nd parameter in <symbol>GTK_DOC_CHECK</symbol> macro in the configure script.
        If you have never changed file in tmpl by hand and migrating from older gtkdoc versions,
        please remove the directory (e.g. from version control system).
      </para>
    </sect1>

    <sect1 id="settingup_firstrun">
      <title>Running the doc build</title>

      <para>
        After the previous steps it's time to run the build. First we need to
	rerun <filename>autogen.sh</filename>. If this script runs configure for
	you, then give it the <option>--enable-gtk-doc</option> option.
	Otherwise manually run <filename>configure</filename> with this option
	afterwards.
      </para>
      <para>
        The first make run generates several additional files in the doc-directories.
        The important ones are:
        <filename>&lt;package&gt;.types</filename>,
        <filename>&lt;package&gt;-docs.xml</filename> (in the past .sgml),
        <filename>&lt;package&gt;-sections.txt</filename>.
      </para>
      <para>
        <example><title>Running the doc build</title>
          <programlisting><![CDATA[
./autogen.sh --enable-gtk-doc
make
]]></programlisting>
        </example>
      </para>
      <para>
        Now you can point your browser to <filename>docs/reference/&lt;package&gt;/index.html</filename>.
        Yes, it's a bit disappointing still. But hang-on, during the next chapter we
        tell you how to fill the pages with life.
      </para>
    </sect1>

    <sect1 id="settingup_vcs">
      <title>Integration with version control systems</title>

      <para>
        As a rule of thumb, it's the files you edit which should go under
        version control. For typical projects it's these files:
        <filename>&lt;package&gt;.types</filename>,
        <filename>&lt;package&gt;-docs.xml</filename> (in the past .sgml),
        <filename>&lt;package&gt;-sections.txt</filename>,
        <filename>Makefile.am</filename>.
      </para>
      <para>
        Files in the <filename>xml/</filename> and <filename>html/</filename>
        directories should not go under version control. Neither should any of
        the <filename>.stamp</filename> files.
      </para>
    </sect1>

    <sect1 id="plain_makefiles">
      <title>Integration with plain makefiles or other build systems</title>

      <para>
        In the case one does not want to use automake and therefore
        <filename>gtk-doc.mak</filename> one will need to call the gtkdoc tools
        in the right order in own makefiles (or other build tools).
      </para>

      <para>
        <example><title>Documentation build steps</title>
          <programlisting><![CDATA[
DOC_MODULE=meep
// sources have changed
gtkdoc-scan --module=$(DOC_MODULE) <source-dir>
gtkdoc-scangobj --module=$(DOC_MODULE)
gtkdoc-mkdb --module=$(DOC_MODULE) --output-format=xml --source-dir=<source-dir>
// xml files have changed
mkdir html
cd html && gtkdoc-mkhtml $(DOC_MODULE) ../meep-docs.xml
gtkdoc-fixxref --module=$(DOC_MODULE) --module-dir=html
]]></programlisting>
        </example>
      </para>

      <para>
        One will need to look at the <filename>Makefile.am</filename> and
        <filename>gtk-doc.mak</filename> to pick the extra options needed.
      </para>
    </sect1>

    <sect1 id="cmake">
       <title>Integration with CMake build systems</title>

       <para>
          GTK-Doc now provides a <filename>GtkDocConfig.cmake</filename> module
          (and the corresponding <filename>GtkDocConfigVersion.cmake</filename>
          module). This provides a <literal>gtk_doc_add_module</literal>
          command that you can set in your <filename>CMakeLists.txt</filename>
          file.
       </para>

       <para>
          The following example shows how to use this command.
          <example><title>Example of using GTK-Doc from CMake</title>
             <programlisting><![CDATA[
find_package(GtkDoc 1.25 REQUIRED)

# Create the doc-libmeep target.
gtk_doc_add_module(
   libmeep ${CMAKE_SOURCE_DIR}/libmeep
      XML meep-docs.xml
      LIBRARIES libmeep
)

# Build doc-libmeep as part of the default target. Without this, you would
# have to explicitly run something like `make doc-libmeep` to build the docs.
add_custom_target(documentation ALL DEPENDS doc-libmeep)

# Install the docs. (This assumes you're using the GNUInstallDirs CMake module
# to set the CMAKE_INSTALL_DOCDIR variable correctly).
install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/libmeep/html
        DESTINATION ${CMAKE_INSTALL_DOCDIR})
]]></programlisting>
         </example>
       </para>
     </sect1>
  </chapter>

  <chapter id="documenting">
    <title>Documenting the code</title>

    <para>
      GTK-Doc uses source code comment with a special syntax for code documentation.
      Further it retrieves information about your project structure from other
      sources. During the next section you will find all information about the
      syntax of the comments.
    </para>

    <note>
      <title>Documentation placement</title>
      <para>
        In the past most documentation had to be filled into files residing
        inside the <filename>tmpl</filename> directory. This has the
        disadvantages that the information is often not updated and also that
        the file tend to cause conflicts with version control systems.
      </para>
      <para>
        The avoid the aforementioned problems we suggest putting the
        documentation inside the sources. This manual will only describe this
        way of documenting code.
      </para>
    </note>

    <para>
      The scanner can handle the majority of C headers fine. In the case of
      receiving warnings from the scanner that look like a special case, one can
      hint GTK-Doc to skip over them.
      <example><title>GTK-Doc comment block</title>
        <programlisting><![CDATA[
#ifndef __GTK_DOC_IGNORE__
/* unparseable code here */
#endif
]]></programlisting>
      </example>
    </para>

    <note>
      <title>Limitations</title>
      <para>
        Note, that GTK-Doc's supports
        <code>#ifndef(__GTK_DOC_IGNORE__)</code> but not
        <code>#if !defined(__GTK_DOC_IGNORE__)</code> or other combinations.
      </para>
    </note>

    <!--  -->

    <sect1 id="documenting_syntax">
      <title>Documentation comments</title>

      <para>
        A multiline comment that starts with an additional '*' marks a
        documentation block that will be processed by the GTK-Doc tools.
        <example><title>GTK-Doc comment block</title>
          <programlisting><![CDATA[
/**
 * identifier:
 * documentation ...
 */
]]></programlisting>
        </example>
      </para>

      <para>
        The 'identifier' is one line with the name of the item the comment is
        related to. The	syntax differs a little depending on the item.
        (TODO add table showing identifiers)
      </para>

      <para>
        The 'documentation' block is also different for each symbol type. Symbol
        types that get parameters such as functions or macros have the parameter
        description first followed by a blank line (just a '*').
        Afterwards follows the detailed description. All lines (outside program
        listings and CDATA sections) just containing a ' *' (blank-asterisk) are
        converted to paragraph breaks.
        If you don't want a paragraph break, change that into ' *  '
        (blank-asterisk-blank-blank). This is useful in preformatted text (code
        listings).
      </para>

      <tip>
        <para>
          When documenting code, describe two aspects:
          <itemizedlist>
             <listitem>
               <para>
                 What it is: The name for a class or function can sometimes
                 be misleading for people coming from a different background.
                </para>
             </listitem>
             <listitem>
               <para>
                 What it does: Tell about common uses. Put it in relation
                 with the other API.
               </para>
             </listitem>
           </itemizedlist>
        </para>
      </tip>

      <para>
        One advantage of hyper-text over plain-text is the ability to have links
        in the document. Writing the correct markup for a link can be tedious
        though. GTK-Doc comes to help by providing several useful abbreviations.
        <itemizedlist>
          <listitem>
            <para>
              Use function() to refer to functions or macros which take arguments.
            </para>
          </listitem>
          <listitem>
            <para>
              Use @param to refer to parameters. Also use this when referring to
              parameters of other functions, related to the one being described.
            </para>
          </listitem>
          <listitem>
            <para>
              Use %constant to refer to a constant, e.g. %G_TRAVERSE_LEAFS.
            </para>
          </listitem>
          <listitem>
            <para>
              Use #symbol to refer to other types of symbol, e.g. structs and
              enums and macros which don't take arguments.
            </para>
          </listitem>
          <listitem>
            <para>
              Use #Object::signal to refer to a GObject signal.
            </para>
          </listitem>
          <listitem>
            <para>
              Use #Object:property to refer to a GObject property.
            </para>
          </listitem>
          <listitem>
            <para>
              Use #Struct.field to refer to a field inside a structure and
              #GObjectClass.foo_bar() to refer to a vmethod.
            </para>
          </listitem>
        </itemizedlist>
      </para>

      <tip>
        <para>
          If you need to use the special characters '&lt;', '&gt;', '()', '@',
          '%', or '#' in your documentation without GTK-Doc changing them you
          can use the XML entities "&amp;lt;", "&amp;gt;", "&amp;lpar;",
          "&amp;rpar;", "&amp;commat;", "&amp;percnt;" and "&amp;num;"
          respectively or escape them with a backslash '\'.
        </para>
      </tip>

      <para>
        DocBook can do more than just links. One can also have lists,
        examples, headings, and images. As of version 1.20, the
        preferred way is to use a subset of the basic text formatting
        syntax called
        <ulink url="http://daringfireball.net/projects/markdown/">Markdown</ulink>.
        On older GTK-Doc versions any documentation that includes
        Markdown will be rendered as is.  For example, list items will
        appear as lines starting with a dash.
      </para>

      <para>
        While markdown is now preferred one can mix both. One limitation here is
        that one can use docbook xml within markdown, but markdown within
        docbook xml is not supported.
      </para>

      <para>
        In older GTK-Doc releases, if you need support for additional
        formatting, you would need to enable the usage of docbook
        XML tags inside doc-comments by putting <option>--xml-mode</option>
        (or <option>--sgml-mode</option>) in the variable
        <symbol>MKDB_OPTIONS</symbol> inside <filename>Makefile.am</filename>.
      </para>

      <para>
        <example><title>GTK-Doc comment block using Markdown</title>
          <programlisting><![CDATA[
/**
 * identifier:
 *
 * documentation paragraph ...
 *
 * # Sub Heading #
 *
 * ## Second Sub Heading
 *
 * # Sub Heading With a Link Anchor # {#heading-two}
 *
 * more documentation:
 *
 * - list item 1
 *
 *   Paragraph inside a list item.
 *
 * - list item 2
 *
 * 1. numbered list item
 *
 * 2. another numbered list item
 *
 * Another paragraph. [A Link to the GNOME Website](http://www.gnome.org/)
 *
 * ![an inline image](plot-result.png)
 *
 * [A link to the heading anchor above][heading-two]
 *
 * A C-language example:
 * |[<!-- language="C" -->
 * GtkWidget *label = gtk_label_new ("Gorgeous!");
 * ]|
 */
]]></programlisting>
        </example>
      </para>

      <para>
        More examples of what markdown tags are supported can be found in the
        <ulink url="https://wiki.gnome.org/Projects/GTK%2B/DocumentationSyntax/Markdown">GTK+ Documentation Markdown Syntax Reference</ulink>.
      </para>

      <tip>
        <para>
          As already mentioned earlier GTK-Doc is for documenting public API. Thus
          one cannot write documentation for static symbols. Nevertheless it is good
          to comment those symbols too. This helps other to understand you code.
          Therefore we recommend to comment these using normal comments (without the
          2nd '*' in the first line).
          If later the function needs to be made public, all one needs to do is to
          add another '*' in the comment block and insert the symbol name at the
          right place inside the sections file.
        </para>
      </tip>
    </sect1>

    <sect1 id="documenting_sections">
      <title>Documenting sections</title>

      <para>
        Each section of the documentation contains information about one class
        or module. To introduce the component one can write a section block.
        The short description is also used inside the table of contents.
        All the @fields are optional.
      </para>

      <para>
        <example><title>Section comment block</title>
          <programlisting><![CDATA[
/**
 * SECTION:meepapp
 * @short_description: the application class
 * @title: Meep application
 * @section_id:
 * @see_also: #MeepSettings
 * @stability: Stable
 * @include: meep/app.h
 * @image: application.png
 *
 * The application class handles ...
 */
]]></programlisting>
        </example>
      </para>

      <variablelist>
        <varlistentry>
          <term>SECTION:&lt;name&gt;</term>
          <listitem>
            <para>
              The name links the section documentation to the respective part in
              the <filename>&lt;package&gt;-sections.txt</filename> file. The
              name given here should match the &lt;FILE&gt; tag in the
              <filename>&lt;package&gt;-sections.txt</filename> file.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>@short_description</term>
          <listitem>
            <para>
              A one line description of the section, that later will appear after
              the links in the TOC and at the top of the section page.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>@title</term>
          <listitem>
            <para>
              The section title defaults to &lt;name&gt; from the SECTION
              declaration. It can be overridden with the @title field.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>@section_id</term>
          <listitem>
            <para>
              Overrides the use of title as a section identifier. For GObjects
              the &lt;title&gt; is used as a section_id and for other sections
              it is &lt;MODULE&gt;-&lt;title&gt;.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>@see_also</term>
          <listitem>
            <para>
              A list of symbols that are related to this section.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>@stability</term>
          <listitem>
            <para>
              An informal description of the stability level this API has.
              We recommend the use of one of these terms:
              <itemizedlist>
                <listitem>
                  <para>
                    Stable
                    - The intention of a Stable interface is to enable arbitrary
                    third parties to develop applications to these interfaces,
                    release them, and have confidence that they will run on all
                    minor releases of the product (after the one in which the
                    interface was introduced, and within the same major release).
                    Even at a major release, incompatible changes are expected
                    to be rare, and to have strong justifications.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Unstable
                    - Unstable interfaces are experimental or transitional.
                    They are typically used to give outside developers early
                    access to new or rapidly changing technology, or to provide
                    an interim solution to a problem where a more general
                    solution is anticipated.
                    No claims are made about either source or binary
                    compatibility from one minor release to the next.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Private
                    - An interface that can be used within the GNOME stack
                    itself, but that is not documented for end-users. Such
                    functions should only be used in specified and documented
                    ways.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Internal
                    - An interface that is internal to a module and does not
                    require end-user documentation. Functions that are
                    undocumented are assumed to be Internal.
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>@include</term>
          <listitem>
            <para>
              The <literal>#include</literal> files to show in the section
              synopsis (a comma separated list), overriding the global
              value from the <link linkend="metafiles_sections">section
              file</link> or command line.  This item is optional.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>@image</term>
          <listitem>
            <para>
              The image to display at the top of the reference page for this
              section.  This will often be some sort of a diagram to illustrate
              the visual appearance of a class or a diagram of its relationship
              to other classes.  This item is optional.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>

      <tip>
        <para>
          To avoid unnecessary recompilation after doc-changes put the section
          docs into the c-source where possible.
        </para>
      </tip>

    </sect1>

    <sect1 id="documenting_symbols">
      <title>Documenting symbols</title>

      <para>
        Each symbol (function, macro, struct, enum, signal and property) is
        documented in a separate block. The block is best placed close to the
        definition of the symbols so that it is easy to keep them in sync.
        Thus functions are usually documented in the c-source and macros,
        structs and enums in the header file.
      </para>

      <sect2><title>General tags</title>

        <para>
          You can add versioning information to all documentation elements to tell
          when an API was introduced, or when it was deprecated.
        </para>

        <variablelist><title>Versioning Tags</title>
          <varlistentry><term>Since:</term>
            <listitem>
              <para>
                Description since which version of the code the API is available.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry><term>Deprecated:</term>
            <listitem>
              <para>
                Paragraph denoting that this function should no be used anymore.
                The description should point the reader to the new API.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>
          You can also add stability information to all documentation elements
          to indicate whether API stability is guaranteed for them for all
          future minor releases of the project.
        </para>

        <para>
          The default stability level for all documentation elements can be set
          by passing the <option>--default-stability</option> argument to
          <application>gtkdoc-mkdb</application> with one of the values below.
        </para>

        <variablelist><title>Stability Tags</title>
          <varlistentry><term>Stability: Stable</term>
            <listitem>
              <para>
                Mark the element as stable. This is for public APIs which are
                guaranteed to remain stable for all future minor releases of the
                project.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry><term>Stability: Unstable</term>
            <listitem>
              <para>
                Mark the element as unstable. This is for public APIs which are
                released as a preview before being stabilised.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry><term>Stability: Private</term>
            <listitem>
              <para>
                Mark the element as private. This is for interfaces which can be
                used by tightly coupled modules, but not by arbitrary third
                parties.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>

        <example><title>General tags</title>
          <programlisting><![CDATA[
/**
 * foo_get_bar:
 * @foo: some foo
 *
 * Retrieves @foo's bar.
 *
 * Returns: @foo's bar
 *
 * Since: 2.6
 * Deprecated: 2.12: Use foo_baz_get_bar() instead.
 */
Bar *
foo_get_bar(Foo *foo)
{
...
]]></programlisting>
        </example>
      </sect2>

      <sect2><title>Annotations</title>

        <para>
          Documentation blocks can contain annotation-tags. These tags will be
          rendered with tooltips describing their meaning. The tags are used by
          gobject-introspection to generate language bindings. A detailed list
          of the supported tags can be found on
          <ulink url="http://live.gnome.org/GObjectIntrospection/Annotations" type="http">the wiki</ulink>.
        </para>

        <example><title>Annotations</title>
          <programlisting><![CDATA[
/**
 * foo_get_bar: (annotation)
 * @foo: (annotation): some foo
 *
 * Retrieves @foo's bar.
 *
 * Returns: (annotation): @foo's bar
 */
...
/**
 * foo_set_bar_using_the_frobnicator: (annotation) (another annotation)
 *                                    (and another annotation)
 * @foo: (annotation) (another annotation): some foo
 *
 * Sets bar on @foo.
 */
]]></programlisting>
        </example>
      </sect2>

      <sect2><title>Function comment block</title>

        <para>
          Please remember to:
          <itemizedlist>
            <listitem>
              <para>
                Document whether returned objects, lists, strings, etc, should be
                freed/unrefed/released.
              </para>
            </listitem>
            <listitem>
              <para>
                Document whether parameters can be NULL, and what happens if they are.
              </para>
            </listitem>
            <listitem>
              <para>
                Mention interesting pre-conditions and post-conditions where appropriate.
              </para>
            </listitem>
          </itemizedlist>
        </para>

        <para>
          Gtk-doc assumes all symbols (macros, functions) starting with '_' are
          private. They are treated like static functions.
        </para>

        <example><title>Function comment block</title>
          <programlisting><![CDATA[
/**
 * function_name:
 * @par1:  description of parameter 1. These can extend over more than
 * one line.
 * @par2:  description of parameter 2
 * @...: a %NULL-terminated list of bars
 *
 * The function description goes here. You can use @par1 to refer to parameters
 * so that they are highlighted in the output. You can also use %constant
 * for constants, function_name2() for functions and #GtkWidget for links to
 * other declarations (which may be documented elsewhere).
 *
 * Returns: an integer.
 *
 * Since: 2.2
 * Deprecated: 2.18: Use other_function() instead.
 */
]]></programlisting>
        </example>

        <variablelist><title>Function tags</title>
          <varlistentry><term>Returns:</term>
            <listitem>
              <para>
                Paragraph describing the returned result.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry><term>@...:</term>
            <listitem>
              <para>
                In case the function has variadic arguments, you should use this
                tag (@Varargs: does also work for historic reasons).
              </para>
            </listitem>
          </varlistentry>
        </variablelist>

      </sect2>

      <sect2><title>Property comment block</title>

        <example><title>Property comment block</title>
          <programlisting><![CDATA[
/**
 * SomeWidget:some-property:
 *
 * Here you can document a property.
 */
g_object_class_install_property (object_class, PROP_SOME_PROPERTY, ...);
]]></programlisting>
        </example>

      </sect2>

      <sect2><title>Signal comment block</title>

        <para>
          Please remember to:
          <itemizedlist>
            <listitem>
              <para>
                Document when the signal is emitted and whether it is emitted before
                or after other signals.
              </para>
            </listitem>
            <listitem>
              <para>
                Document what an application might do in the signal handler.
              </para>
            </listitem>
          </itemizedlist>
        </para>

        <example><title>Signal comment block</title>
          <programlisting><![CDATA[
/**
 * FooWidget::foobarized:
 * @widget: the widget that received the signal
 * @foo: some foo
 * @bar: some bar
 *
 * The ::foobarized signal is emitted each time someone tries to foobarize @widget.
 */
foo_signals[FOOBARIZED] =
  g_signal_new ("foobarized",
                ...
]]></programlisting>
        </example>

      </sect2>

      <sect2><title>Struct comment block</title>
        <example><title>Struct comment block</title>
          <programlisting><![CDATA[
/**
 * FooWidget:
 * @bar: some #gboolean
 *
 * This is the best widget, ever.
 */
typedef struct _FooWidget {
  GtkWidget parent_instance;

  gboolean bar;
} FooWidget;
]]></programlisting>
        </example>

        <para>
          Use <code>/*&lt; private &gt;*/</code> before the private struct fields
          you want to hide. Use <code>/*&lt; public &gt;*/</code> for the reverse
          behaviour.
        </para>

        <para>
          If the first field is "g_iface", "parent_instance" or "parent_class"
          it will be considered private automatically and doesn't need to be
          mentioned in the comment block.
        </para>

        <para>
          Struct comment blocks can also be used for GObjects and GObjectClasses.
          It is usually a good idea to add a comment block for a class, if it has
          vmethods (as this is how they can be documented). For the GObject
          itself one can use the related section docs, having a separate block
          for the instance struct would be useful if the instance has public
          fields. One disadvantage here is that this creates two index entries
          of the same name (the structure and the section).
        </para>

      </sect2>

      <sect2><title>Enum comment block</title>
        <example><title>Enum comment block</title>
          <programlisting><![CDATA[
/**
 * Something:
 * @SOMETHING_FOO: something foo
 * @SOMETHING_BAR: something bar
 *
 * Enum values used for the thing, to specify the thing.
 */
typedef enum {
  SOMETHING_FOO,
  SOMETHING_BAR,
  /*< private >*/
  SOMETHING_COUNT
} Something;
]]></programlisting>
        </example>

        <para>
          Use <code>/*&lt; private &gt;*/</code> before the private enum values
          you want to hide. Use <code>/*&lt; public &gt;*/</code> for the reverse
          behaviour.
        </para>

      </sect2>
    </sect1>


    <sect1 id="documenting_inline_program">
      <title>Inline program documentation</title>
      <para>
         You can document programs and their commandline interface using inline
         documentation.
      </para>

      <variablelist>
      <title>Tags</title>

      <varlistentry><term>PROGRAM</term>

      <listitem>
      <para>
         Defines the start of a program documentation.
      </para>
      </listitem>
      </varlistentry>

      <varlistentry>
      <term>@short_description:</term>
      <listitem>
      <para>
         Defines a short description of the program. (Optional)
      </para>
      </listitem>
      </varlistentry>

      <varlistentry>
      <term>@synopsis:</term>
      <listitem>
      <para>
         Defines the arguments, or list of arguments that the program can take.
         (Optional)
      </para>
      </listitem>
      </varlistentry>

      <varlistentry>
      <term>@see_also:</term>
      <listitem>
      <para>
          See Also manual page section. (Optional)
      </para>
      </listitem>
      </varlistentry>

      <varlistentry>
      <term>@arg:</term>
      <listitem>
      <para>
          Argument(s) passed to the program and their description. (Optional)
      </para>
      </listitem>
      </varlistentry>

      <varlistentry>
      <term>Description:</term>
      <listitem>
      <para>
          A longer description of the program.
      </para>
      </listitem>
      </varlistentry>

      <varlistentry>
      <term>Returns:</term>
      <listitem>
      <para>
          Specificy what value(s) the program returns. (Optional)
      </para>
      </listitem>
      </varlistentry>

      </variablelist>

      <sect2>
        <title>Example of program documentation.</title>
        <example><title>Program documentation block</title>
        <programlisting><![CDATA[
/**
 * PROGRAM:test-program
 * @short_description: A test program
 * @synopsis: test-program [*OPTIONS*...] --arg1 *arg* *FILE*
 * @see_also: test(1)
 * @--arg1 *arg*: set arg1 to *arg*
 * @--arg2 *arg*: set arg2 to *arg*
 * @-v, --version: Print the version number
 * @-h, --help: Print the help message
 *
 * Long description of program.
 *
 * Returns: Zero on success, non-zero on failure
 */
int main(int argc, char *argv[])
{
	return 0;
}
]]></programlisting>
        </example>

      </sect2>
    </sect1>

    <sect1 id="documenting_docbook">
      <title>Useful DocBook tags</title>

      <para>
        Here are some DocBook tags which are most useful when documenting the
        code.
      </para>

      <para>
        To link to another section in the GTK docs:

        <informalexample>
          <programlisting><![CDATA[
<link linkend="glib-Hash-Tables">Hash Tables</link>
]]></programlisting>
        </informalexample>
        The linkend is the SGML/XML id on the top item of the page you want to link to.
        For most pages this is currently the part ("gtk", "gdk", "glib") and then
        the page title ("Hash Tables"). For widgets it is just the class name.
        Spaces and underscores are converted to '-' to conform to SGML/XML.
      </para>

      <para>
        To refer to an external function, e.g. a standard C function:
        <informalexample>
          <programlisting><![CDATA[
<function>...</function>
]]></programlisting>
        </informalexample>
      </para>

      <para>
        To include example code:
        <informalexample>
          <programlisting><![CDATA[
<example>
  <title>Using a GHashTable.</title>
  <programlisting>
      ...
  </programlisting>
</example>
]]></programlisting>
        </informalexample>
        or possibly this, for very short code fragments which don't need a title:
        <informalexample>
          <programlisting><![CDATA[
<informalexample>
  <programlisting>
  ...
  </programlisting>
</informalexample>
]]></programlisting>
        </informalexample>
        For the latter GTK-Doc also supports an abbreviation:
<![CDATA[
|[
  ...
]|
]]>
      </para>

      <para>
        To include bulleted lists:
        <informalexample>
          <programlisting><![CDATA[
<itemizedlist>
  <listitem>
    <para>
      ...
    </para>
  </listitem>
  <listitem>
    <para>
      ...
    </para>
  </listitem>
</itemizedlist>
]]></programlisting>
        </informalexample>
      </para>

      <para>
        To include a note which stands out from the text:
        <informalexample>
          <programlisting><![CDATA[
<note>
  <para>
    Make sure you free the data after use.
  </para>
</note>
]]></programlisting>
        </informalexample>
      </para>

      <para>
        To refer to a type:
        <informalexample>
          <programlisting><![CDATA[
<type>unsigned char</type>
]]></programlisting>
        </informalexample>
      </para>

      <para>
        To refer to an external structure (not one described in the GTK docs):
        <informalexample>
          <programlisting><![CDATA[
<structname>XFontStruct</structname>
]]></programlisting>
        </informalexample>
      </para>

      <para>
        To refer to a field of a structure:
        <informalexample>
          <programlisting><![CDATA[
<structfield>len</structfield>
]]></programlisting>
        </informalexample>
      </para>

      <para>
        To refer to a class name, we could possibly use:
        <informalexample>
          <programlisting><![CDATA[
<classname>GtkWidget</classname>
]]></programlisting>
        </informalexample>
        but you'll probably be using #GtkWidget instead (to automatically create
        a link to the GtkWidget page - see <link linkend="documenting_syntax">the abbreviations</link>).
      </para>

      <para>
        To emphasize text:
        <informalexample>
          <programlisting><![CDATA[
<emphasis>This is important</emphasis>
]]></programlisting>
        </informalexample>
      </para>

      <para>
        For filenames use:
        <informalexample>
          <programlisting><![CDATA[
<filename>/home/user/documents</filename>
]]></programlisting>
        </informalexample>
      </para>

      <para>
        To refer to keys use:
        <informalexample>
          <programlisting><![CDATA[
<keycombo><keycap>Control</keycap><keycap>L</keycap></keycombo>
]]></programlisting>
        </informalexample>
      </para>

    </sect1>
  </chapter>

  <chapter id="metafiles">
    <title>Filling the extra files</title>

    <para>
      There are a couple of extra files, that need to be maintained along with
      the inline source code comments:
      <filename>&lt;package&gt;.types</filename>,
      <filename>&lt;package&gt;-docs.xml</filename> (in the past .sgml),
      <filename>&lt;package&gt;-sections.txt</filename>.
    </para>

    <sect1 id="metafiles_types">
      <title>Editing the types file</title>

      <para>
        If your library or application includes GObjects, you want
        their signals, arguments/parameters and position in the hierarchy to be
        shown in the documentation. All you need to do, is to list the
        <function>xxx_get_type</function> functions together with their include
        inside the <filename>&lt;package&gt;.types</filename> file.
      </para>

      <para>
        <example><title>Example types file snippet</title>
          <programlisting><![CDATA[
#include <gtk/gtk.h>

gtk_accel_label_get_type
gtk_adjustment_get_type
gtk_alignment_get_type
gtk_arrow_get_type
]]></programlisting>
        </example>
      </para>

      <para>
        Since GTK-Doc 1.8 <application>gtkdoc-scan</application> can generate this list for you.
        Just add "--rebuild-types" to SCAN_OPTIONS in <filename>Makefile.am</filename>. If you
        use this approach you should not dist the types file nor have it under version control.
      </para>

    </sect1>

    <sect1 id="metafiles_master">
      <title>Editing the master document</title>

      <para>
        GTK-Doc produces documentation in DocBook SGML/XML. When processing the
        inline source comments, the GTK-Doc tools generate one documentation
        page per class or module as a separate file. The master document
        includes them and place them in an order.
      </para>

      <para>
        While GTK-Doc creates a template master document for you, later runs will
        not touch it again. This means that one can freely structure the
        documentation. That includes grouping pages and adding extra pages.
        GTK-Doc has now a test suite, where also the master-document is recreated from scratch.
        Its a good idea to look at this from time to time to see if there are
        some new goodies introduced there.
      </para>

      <tip>
        <para>
          Do not create tutorials as extra documents. Just write extra chapters.
          The benefit of directly embedding the tutorial for your library into
          the API documentation is that it is easy to link for the tutorial to
          symbol documentation. Apart chances are higher that the tutorial gets
          updates along with the library.
        </para>
      </tip>

      <para>
        So what are the things to change inside the master document? For a start
        is only a little. There are some placeholders (text in square brackets)
        there which you should take care of.
      </para>

      <para>
        <example><title>Master document header</title>
          <programlisting><![CDATA[
<bookinfo>
  <title>MODULENAME Reference Manual</title>
  <releaseinfo>
    for MODULENAME [VERSION]
    The latest version of this documentation can be found on-line at
    <ulink role="online-location" url="http://[SERVER]/MODULENAME/index.html">http://[SERVER]/MODULENAME/</ulink>.
  </releaseinfo>
</bookinfo>

<chapter>
  <title>[Insert title here]</title>
]]></programlisting>
        </example>
      </para>

      <para>
        In addition a few option elements are created in commented form. You can
        review these and enable them as you like.
      </para>

      <para>
        <example><title>Optional part in the master document</title>
          <programlisting><![CDATA[
  <!-- enable this when you use gobject introspection annotations
  <xi:include href="xml/annotation-glossary.xml"><xi:fallback /></xi:include>
  -->
]]></programlisting>
        </example>
      </para>

      <para>
        Finally you need to add new section whenever you introduce one. The
        <link linkend="modernizing-gtk-doc-1-16">gtkdoc-check</link> tool will
        remind you of newly generated xml files that are not yet included into
        the doc.
      </para>

      <para>
        <example><title>Including generated sections</title>
          <programlisting><![CDATA[
  <chapter>
    <title>my library</title>
      <xi:include href="xml/object.xml"/>
      ...
]]></programlisting>
        </example>
      </para>

    </sect1>

    <sect1 id="metafiles_sections">
      <title>Editing the section file</title>

      <para>
        The section file is used to organise the documentation output by
        GTK-Doc. Here one specifies which symbol belongs to which module or
        class and control the visibility (public or private).
      </para>

      <para>
        The section file is a plain text file with tags delimiting sections.
        Blank lines are ignored and lines starting with a '#' are treated as
        comment lines.
      </para>

      <note>
        <para>
          While the tags make the file look like xml, it is not. Please do not
          close tags like &lt;SUBSECTION&gt;.
        </para>
      </note>

      <para>
        <example><title>Including generated sections</title>
          <programlisting><![CDATA[
<INCLUDE>libmeep/meep.h</INCLUDE>

<SECTION>
<FILE>meepapp</FILE>
<TITLE>MeepApp</TITLE>
MeepApp
<SUBSECTION Standard>
MEEP_APP
...
MeepAppClass
meep_app_get_type
</SECTION>
]]></programlisting>
        </example>
      </para>

      <para>
        The &lt;FILE&gt; ... &lt;/FILE&gt; tag is used to specify the file name,
        without any suffix. For example, using '&lt;FILE&gt;gnome-config&lt;/FILE&gt;'
        will result in the section declarations being output in the template
        file <filename>tmpl/gnome-config.sgml</filename>, which will be
        converted into the DocBook XML file <filename>xml/gnome-config.sgml</filename>
        or the DocBook XML file <filename>xml/gnome-config.xml</filename>.
        (The name of the HTML file is based on the module name and the section
        title, or for GObjects it is based on the GObjects class name converted
        to lower case).
      </para>

      <para>
        The &lt;TITLE&gt; ... &lt;/TITLE&gt; tag is used to specify the title of
        the section. It is only useful before the templates (if used) are
        initially created, since the title set in the template file overrides
        this. Also if one uses SECTION comment in the sources, this is obsolete.
      </para>

      <para>
        You can group items in the section by using the &lt;SUBSECTION&gt; tag.
        Currently it outputs a blank line between subsections in the synopsis
        section.
        You can also use &lt;SUBSECTION Standard&gt; for standard GObject
        declarations (e.g. the functions like g_object_get_type and macros like
        G_OBJECT(), G_IS_OBJECT() etc.).
        Currently these are left out of the documentation.
        You can also use &lt;SUBSECTION Private&gt; for private declarations
        which will not be output (it is a handy way to avoid warning messages
        about unused declarations).
        If your library contains private types which you don't want to appear in
        the object hierarchy and the list of implemented or required interfaces,
        add them to a Private subsection.
        Whether you would place GObject and GObjectClass like structs in public
        or Standard section depends if they have public entries (variables,
        vmethods).
      </para>

      <para>
        You can also use &lt;INCLUDE&gt; ... &lt;/INCLUDE&gt; to specify the
        #include files which are shown in the synopsis sections.
        It contains a comma-separate list of #include files, without the angle
        brackets. If you set it outside of any sections, it acts for all
        sections until the end of the file. If you set it within a section, it
        only applies to that section.
      </para>

    </sect1>

  </chapter>

  <chapter id="reports">
    <title>Controlling the result</title>

    <para>
      A GTK-Doc run generates report files inside the documentation directory.
      The generated files are named:
      <filename>&lt;package&gt;-undocumented.txt</filename>,
      <filename>&lt;package&gt;-undeclared.txt</filename> and
      <filename>&lt;package&gt;-unused.txt</filename>.
      All those are plain text files that can be viewed and postprocessed easily.
    </para>

    <para>
      The <filename>&lt;package&gt;-undocumented.txt</filename> file starts with
      the documentation coverage summary. Below are two sections divided by
      blank lines. The first section lists undocumented or incomplete symbols.
      The second section does the same for section docs. Incomplete entries are
      those, which have documentation, but where e.g. a new parameter has been
      added.
    </para>

    <para>
      The <filename>&lt;package&gt;-undeclared.txt</filename> file lists symbols
      given in the <filename>&lt;package&gt;-sections.txt</filename> but not
      found in the sources. Check if they have been removed or if they are
      misspelled.
    </para>

    <para>
      The <filename>&lt;package&gt;-unused.txt</filename> file lists symbol
      names, where the GTK-Doc scanner has found documentation, but does not
      know where to put it. This means that the symbol has not yet been added to
      the <filename>&lt;package&gt;-sections.txt</filename> file.
    </para>

    <tip>
      <para>
        Enable or add the <option>TESTS=$(GTKDOC_CHECK)</option> line in Makefile.am.
        If at least GTK-Doc 1.9 is installed, this will run sanity checks during
        <command>make check</command> run.
      </para>
    </tip>

    <para>
      One can also look at the files produced by the source code scanner:
      <filename>&lt;package&gt;-decl-list.txt</filename> and
      <filename>&lt;package&gt;-decl.txt</filename>. The first one can be
      compared with the section file if that is manually maintained. The second
      lists all declarations from the headers. If a symbol is missing one could
      check if this file contains it.
    </para>

    <para>
      If the project is GObject based, one can also look into the files produced
      by the object scanner:
      <filename>&lt;package&gt;.args.txt</filename>,
      <filename>&lt;package&gt;.hierarchy.txt</filename>,
      <filename>&lt;package&gt;.interfaces.txt</filename>,
      <filename>&lt;package&gt;.prerequisites.txt</filename> and
      <filename>&lt;package&gt;.signals.txt</filename>. If there are missing
      symbols in any of those, one can ask GTK-Doc to keep the intermediate
      scanner file for further analysis, by running it as
      <command>GTK_DOC_KEEP_INTERMEDIATE=1 make</command>.
    </para>
  </chapter>

  <chapter id="modernizing">
    <title>Modernizing the documentation</title>

    <para>
      GTK-Doc has been around for quite some time. In this section we list new
      features together with the version since when it is available.
    </para>

    <sect1 id="modernizing-gtk-doc-1-9">
      <title>GTK-Doc 1.9</title>

      <para>
        When using xml instead of sgml, one can actually name the master
        document <filename>&lt;package&gt;-docs.xml</filename>.
      </para>

      <para>
        This version supports <option>SCAN_OPTIONS=--rebuild-sections</option>
        in <filename>Makefile.am</filename>. When this is enabled, the
        <filename>&lt;package&gt;-sections.txt</filename> is autogenerated and
        can be removed from the vcs. This only works nicely for projects that
        have a very regular structure (e.g. each .{c,h} pair will create new
        section). If one organize a project close to that updating a manually
        maintained section file can be as simple as running
        <code>meld &lt;package&gt;-decl-list.txt &lt;package&gt;-sections.txt</code>.
      </para>

      <para>
        Version 1.8 already introduced the syntax for documenting sections in
        the sources instead of the separate files under <filename class='directory'>tmpl</filename>.
        This version adds options to switch the whole doc module to not use the
        extra tmpl build step at all, by using <option>--flavour no-tmpl</option>
        in <filename>configure.ac</filename>. If you don't have a <filename class='directory'>tmpl</filename>
        checked into your source control system and haven't yet switched, just
        add the flag to <filename>configure.ac</filename> and you are done.
      </para>
    </sect1>

    <sect1 id="modernizing-gtk-doc-1-10">
      <title>GTK-Doc 1.10</title>

      <para>
        This version supports <option>SCAN_OPTIONS=--rebuild-types</option> in
        <filename>Makefile.am</filename>. When this is enabled, the
        <filename>&lt;package&gt;.types</filename> is autogenerated and can be
        removed from the vcs. When using this feature it is important to also
        setup the <varname>IGNORE_HFILES</varname> in
        <filename>Makefile.am</filename> for code that is build conditionally.
      </para>
    </sect1>

    <sect1 id="modernizing-gtk-doc-1-16">
      <title>GTK-Doc 1.16</title>

      <para>
        This version includes a new tool called gtkdoc-check. This tool can run
        a set of sanity checks on your documentation. It is enabled by adding
        these lines to the end of <filename>Makefile.am</filename>.
        <example><title>Enable gtkdoc-check</title>
          <programlisting><![CDATA[
if ENABLE_GTK_DOC
TESTS_ENVIRONMENT = \
  DOC_MODULE=$(DOC_MODULE) DOC_MAIN_SGML_FILE=$(DOC_MAIN_SGML_FILE) \
  SRCDIR=$(abs_srcdir) BUILDDIR=$(abs_builddir)
TESTS = $(GTKDOC_CHECK)
endif
]]></programlisting>
        </example>
      </para>
    </sect1>

    <sect1 id="modernizing-gtk-doc-1-20">
      <title>GTK-Doc 1.20</title>

      <para>
        Version 1.18 brought some initial markdown support. Using markdown in
        doc comments is less intrusive than writing docbook xml. This version
        improves a lot on this and add a lot more styles. The section that
        explains the <link linkend="documenting_syntax">comment syntax</link>
        has all the details.
      </para>
    </sect1>

    <sect1 id="modernizing-gtk-doc-1-25">
      <title>GTK-Doc 1.25</title>

      <para>
        The makefiles shipped with this version generate an entity file at <filename>xml/gtkdocentities.ent</filename>,
        containing entities for e.g. package_name and package_version. You can
        use this e.g. in the main xml file to avoid hardcoding the version
        number. Below is an example that shows how the entity file is included
        and how the entities are used. The entities can also be used in all
        generated files, GTK-Doc will use the same xml header in generated xml
        files.
        <example><title>Use pre-generated entities</title>
          <programlisting><![CDATA[
<?xml version="1.0"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
  <!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
  <!ENTITY % gtkdocentities SYSTEM "xml/gtkdocentities.ent">
  %gtkdocentities;
]>
<book id="index" xmlns:xi="http://www.w3.org/2003/XInclude">
  <bookinfo>
    <title>&package_name; Reference Manual</title>
    <releaseinfo>
      for &package_string;.
      The latest version of this documentation can be found on-line at
      <ulink role="online-location" url="http://[SERVER]/&package_name;/index.html">http://[SERVER]/&package_name;/</ulink>.
    </releaseinfo>
  </bookinfo>
]]></programlisting>
        </example>
      </para>
    </sect1>
  </chapter>

  <chapter id="documenting-others">
    <title>Documenting other interfaces</title>

    <para>
      So far we have been using GTK-Doc to document the API of code. The next
      sections contain suggestions how the tools can be used to document other
      interfaces too.
    </para>

    <sect1 id="commandline-interfaces">
      <title>Command line options and man pages</title>

      <para>
        As one can generate man pages for a docbook refentry as well, it sounds
        like a good idea to use it for that purpose. This way the interface is
        part of the reference and one gets the man-page for free.
      </para>

      <sect2 id="commandline-interfaces-file">
        <title>Document the tool</title>

        <para>
          Create one refentry file per tool. Following
          <link linkend="settingup_docfiles">our example</link> we would call it
          <filename>meep/docs/reference/meeper/meep.xml</filename>. For the xml
          tags that should be used and can look at generated file in the xml
          subdirectory as well as examples e.g. in glib.
        </para>
      </sect2>

      <sect2 id="commandline-interfaces-configure">
        <title>Adding the extra configure check</title>

        <para>
          <example><title>Extra configure checks</title>
            <programlisting><![CDATA[
AC_ARG_ENABLE(man,
              [AC_HELP_STRING([--enable-man],
                              [regenerate man pages from Docbook [default=no]])],enable_man=yes,
              enable_man=no)

AC_PATH_PROG([XSLTPROC], [xsltproc])
AM_CONDITIONAL(ENABLE_MAN, test x$enable_man != xno)
]]></programlisting>
          </example>
        </para>
      </sect2>

      <sect2 id="commandline-interfaces-make">
        <title>Adding the extra makefile rules</title>

        <para>
          <example><title>Extra configure checks</title>
            <programlisting><![CDATA[
man_MANS = \
       meeper.1

if ENABLE_GTK_DOC
if ENABLE_MAN

%.1 : %.xml
        @XSLTPROC@ -nonet http://docbook.sourceforge.net/release/xsl/current/manpages/docbook.xsl $<

endif
endif

BUILT_EXTRA_DIST = $(man_MANS)
EXTRA_DIST += meep.xml
]]></programlisting>
          </example>
        </para>
      </sect2>
    </sect1>

    <sect1 id="dbus-interfaces">
      <title>DBus interfaces</title>

      <para>
        (FIXME: http://hal.freedesktop.org/docs/DeviceKit/DeviceKit.html,
http://cgit.freedesktop.org/DeviceKit/DeviceKit/tree/doc/dbus)
      </para>
    </sect1>

  </chapter>

  <chapter id="faq">
    <title>Frequently asked questions</title>

    <segmentedlist>
      <?dbhtml list-presentation="list"?>
      <segtitle>Question</segtitle>
      <segtitle>Answer</segtitle>
      <seglistitem>
        <seg>No class hierarchy.</seg>
        <seg>
          The objects <function>xxx_get_type()</function> function has not been
          entered into the <filename>&lt;package&gt;.types</filename> file.
        </seg>
      </seglistitem>
      <seglistitem>
        <seg>Still no class hierarchy.</seg>
        <seg>
          Missing or wrong naming in <filename>&lt;package&gt;-sections.txt</filename>
          file (see <ulink url="http://mail.gnome.org/archives/gtk-doc-list/2003-October/msg00006.html">explanation</ulink>).
        </seg>
      </seglistitem>
      <seglistitem>
        <seg>Damn, I have still no class hierarchy.</seg>
        <seg>
          Is the object name (name of the instance struct, e.g. <type>GtkWidget</type>)
          part of the normal section (don't put this into Standard or Private
          subsections).
        </seg>
      </seglistitem>
      <seglistitem>
        <seg>No symbol index.</seg>
        <seg>
          Does the <filename>&lt;package&gt;-docs.{xml,sgml}</filename> contain a
          index that xi:includes the generated index?
        </seg>
      </seglistitem>
      <seglistitem>
        <seg>Symbols are not linked to their doc-section.</seg>
        <seg>
          Is the doc-comment using the correct markup (added #,% or ())?
          Check if the gtkdoc-fixxref warns about unresolvable xrefs.
        </seg>
      </seglistitem>
      <seglistitem>
        <seg>A new class does not appear in the docs.</seg>
        <seg>
          Is the new page xi:included from
          <filename>&lt;package&gt;-docs.{xml,sgml}</filename>.
        </seg>
      </seglistitem>
      <seglistitem>
        <seg>A new symbol does not appear in the docs.</seg>
        <seg>
          Is the doc-comment properly formatted. Check for spelling mistakes in
          the begin of the comment. Check if the gtkdoc-fixxref warns about
          unresolvable xrefs. Check if the symbol is correctly listed in the
          <filename>&lt;package&gt;-sections.txt</filename> in a public subsection.
        </seg>
      </seglistitem>
      <seglistitem>
        <seg>A type is missing from the class hierarchy.</seg>
        <seg>
          If the type is listed in <filename>&lt;package&gt;.hierarchy</filename>
          but not in <filename>xml/tree_index.sgml</filename> then double check
          that the type is correctly placed in the <filename>&lt;package&gt;-sections.txt</filename>.
          If the type instance (e.g. <type>GtkWidget</type>) is not listed or
          incidentally marked private it will not be shown.
        </seg>
      </seglistitem>
      <seglistitem>
        <seg>I get foldoc links for all gobject annotations.</seg>
        <seg>
          Check that <filename>xml/annotation-glossary.xml</filename> is
          xi:included from <filename>&lt;package&gt;-docs.{xml,sgml}</filename>.
        </seg>
      </seglistitem>

      <!-- gtk-doc warnings: -->
      <seglistitem>
        <seg>Parameter described in source code comment block but does not exist</seg>
        <seg>Check if the prototype in the header has different parameter names as in the source.</seg>
      </seglistitem>

      <!-- docbook warnings: -->
      <seglistitem>
        <seg>multiple "IDs" for constraint linkend: XYZ</seg>
        <seg>Symbol XYZ appears twice in <filename>&lt;package&gt;-sections.txt</filename> file.</seg>
      </seglistitem>
      <seglistitem>
        <seg>Element typename in namespace '' encountered in para, but no template matches.</seg>
        <seg />
      </seglistitem>
    </segmentedlist>
  </chapter>

  <chapter id="contrib">
    <title>Tools related to gtk-doc</title>

    <para>
      GtkDocPlugin - a <ulink url="http://trac-hacks.org/wiki/GtkDocPlugin">Trac GTK-Doc</ulink>
      integration plugin, that adds API docs to a trac site and integrates with
      the trac search.
    </para>
    <para>
      Gtkdoc-depscan - a tool (part of gtk-doc) to check used API against since
      tags in the API to determine the minimum required version.
    </para>

  </chapter>

  <!-- ======== Appendix: FDL ================================== -->
  &FDL;

</book>

